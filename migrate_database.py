#!/usr/bin/env python3
"""
Script de migration avanc√© pour JurisFix
G√®re l'ajout de colonnes manquantes sans perte de donn√©es
"""

import os
import sys
from datetime import datetime
from app import app, db
from flask_migrate import init, migrate, upgrade
from sqlalchemy import inspect, text

def check_database_schema():
    """V√©rifie l'√©tat actuel du sch√©ma de base de donn√©es"""
    with app.app_context():
        inspector = inspect(db.engine)
        
        print("üîç Analyse du sch√©ma de base de donn√©es...")
        
        # V√©rifier si la table user existe
        if 'user' not in inspector.get_table_names():
            print("‚ùå Table 'user' introuvable - Base de donn√©es vide")
            return False
        
        # V√©rifier les colonnes de la table user
        columns = inspector.get_columns('user')
        column_names = [col['name'] for col in columns]
        
        print(f"üìä Colonnes actuelles dans 'user': {', '.join(column_names)}")
        
        # Colonnes requises
        required_columns = [
            'id', 'email', 'password_hash', 'name', 'service', 
            'role', 'is_active', 'created_at', 'last_login'
        ]
        
        missing_columns = [col for col in required_columns if col not in column_names]
        
        if missing_columns:
            print(f"‚ö†Ô∏è  Colonnes manquantes: {', '.join(missing_columns)}")
            return missing_columns
        
        print("‚úÖ Sch√©ma de base de donn√©es complet")
        return True

def manual_migration(missing_columns):
    """Migration manuelle pour ajouter les colonnes manquantes"""
    with app.app_context():
        print("\nüîß Migration manuelle en cours...")
        
        # Mapping des colonnes avec leurs types SQL
        column_definitions = {
            'password_hash': 'VARCHAR(200)',
            'name': 'VARCHAR(100)',
            'service': 'VARCHAR(100)',
            'role': "VARCHAR(50) DEFAULT 'collaborateur'",
            'is_active': 'BOOLEAN DEFAULT 1',
            'created_at': 'DATETIME DEFAULT CURRENT_TIMESTAMP',
            'last_login': 'DATETIME'
        }
        
        try:
            for column in missing_columns:
                if column in column_definitions:
                    sql = f"ALTER TABLE user ADD COLUMN {column} {column_definitions[column]}"
                    print(f"‚ûï Ajout de la colonne '{column}'...")
                    db.session.execute(text(sql))
            
            db.session.commit()
            print("‚úÖ Migration manuelle r√©ussie!")
            
            # Mise √† jour des donn√©es existantes si n√©cessaire
            update_existing_users()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la migration: {e}")
            db.session.rollback()
            return False
        
        return True

def update_existing_users():
    """Met √† jour les utilisateurs existants avec les valeurs par d√©faut"""
    from app import User
    
    print("\nüìù Mise √† jour des utilisateurs existants...")
    
    users = User.query.all()
    for user in users:
        # Valeurs par d√©faut pour les champs manquants
        if not hasattr(user, 'password_hash') or not user.password_hash:
            print(f"‚ö†Ô∏è  Utilisateur {user.email} sans mot de passe - D√©finition d'un mot de passe temporaire")
            user.set_password('temp_password_change_me')
        
        if not hasattr(user, 'name') or not user.name:
            user.name = user.email.split('@')[0].title()
        
        if not hasattr(user, 'service') or not user.service:
            user.service = 'Service de m√©diation'
        
        if not hasattr(user, 'role') or not user.role:
            user.role = 'collaborateur'
        
        if not hasattr(user, 'is_active'):
            user.is_active = True
        
        if not hasattr(user, 'created_at') or not user.created_at:
            user.created_at = datetime.utcnow()
    
    db.session.commit()
    print("‚úÖ Utilisateurs mis √† jour")

def init_flask_migrate():
    """Initialise Flask-Migrate pour les futures migrations"""
    print("\nüöÄ Initialisation de Flask-Migrate...")
    
    if not os.path.exists('migrations'):
        os.system('flask db init')
        print("‚úÖ Flask-Migrate initialis√©")
    else:
        print("‚ÑπÔ∏è  Flask-Migrate d√©j√† initialis√©")
    
    # Cr√©er une migration initiale
    os.system('flask db migrate -m "Initial migration with complete schema"')
    os.system('flask db upgrade')
    
    print("‚úÖ Migration initiale cr√©√©e et appliqu√©e")

def main():
    """Fonction principale"""
    print("üîÑ JurisFix - Migration de base de donn√©es\n")
    
    # V√©rifier l'√©tat du sch√©ma
    result = check_database_schema()
    
    if result is False:
        # Base de donn√©es vide - cr√©er les tables
        print("\nüì¶ Cr√©ation de la base de donn√©es depuis z√©ro...")
        from app import create_tables
        create_tables()
        init_flask_migrate()
        
    elif isinstance(result, list):
        # Colonnes manquantes - migration manuelle
        if manual_migration(result):
            init_flask_migrate()
        else:
            print("\n‚ùå Migration √©chou√©e - Recommandation: r√©initialisez la base de donn√©es")
            sys.exit(1)
    
    else:
        # Sch√©ma complet
        print("\n‚úÖ Base de donn√©es d√©j√† √† jour!")
        if not os.path.exists('migrations'):
            init_flask_migrate()
    
    print("\nüéâ Migration termin√©e avec succ√®s!")
    print("üë§ Connectez-vous avec: test@jurisfix.fr / password123")

if __name__ == "__main__":
    main()